schema {
    query: Query
    mutation: Mutation
}

scalar Value
scalar Date
scalar Cursor
scalar Upload

type Query {
    me: User
    users(first: Int = 10, after: Cursor, search: String = "", email: String = ""): UserConnection!
    accountTypes: [AccountType!]!
    node(id: ID!): Node
}

interface Node {
    id: ID!
}

interface DeletePayload {
    deletedId: ID!
}

interface UpdatePayload {
    node: Node!
}

interface CreatePayload {
    node: Node!
}

interface Edge {
    node: Node!
    cursor: Cursor!
}

interface Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [Edge!]!
    totalCount: Int
}



type Mutation {
    signInUser(input: SignInUserInput!): AuthPayload!
    signUpUser(input: SignUpUserInput!): AuthPayload!

    addUserAvatar(userId: ID!, file: Upload!): AvatarCreatePayload!
    deleteUserAvatar(id: ID!): AvatarDeletePayload!
    addUserPhoto(input: UserPhotoCreateInput!): UserPhotoCreatePayload!
    deleteUserPhoto(id: ID!): UserPhotoDeletePayload!
    saveProfileFieldValues(input: ProfileFieldSaveInput!): ProfileFieldSavePayload!
}

input SignInUserInput {
  login: String!
  password: String!
}

input SignUpUserInput {
  name: String!
  email: String!
  password: String!
}

type AuthPayload {
    accessToken: String
    user: User
}



type ConnectionMetaInfo {
    firstCursor: Cursor!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

type User implements Node {
    id: ID!
    name: String!
    email: String!
    activityTime: Date!

    info: UserInfo!

    avatar: Avatar
    friends(first: Int = 10, after: Cursor): UserFriendsConnection!
    photos(first: Int = 10, after: Cursor): UserPhotoConnection!

    profile: Profile!
}

type UserInfo {
    headline: String,
    location: String,
    about: String,
}

type UserEdge implements Edge {
    node: User!
    cursor: Cursor!
}

type UserConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [UserEdge!]!
    totalCount: Int
}

type UserFriendsConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [UserEdge!]!
    totalCount: Int
}

type UserPhotoConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [PhotoEdge!]!
    totalCount: Int
}

input UserPhotoCreateInput {
    userId: ID!
    file: Upload!
    uploadTime: Date
}

type UserPhotoCreatePayload implements CreatePayload {
    user: User!
    node: Photo!
}

type UserPhotoDeletePayload implements DeletePayload {
    deletedId: ID!
    user: User!
}



type Profile {
    accountType: AccountType!
    values: [ProfileFieldValue!]!
}

enum ProfileFieldPlace {
    SIGN_UP
    VIEW
    EDIT
}

type AccountType implements Node {
    id: ID!
    label: String!
    fields(on: ProfileFieldPlace): [ProfileField!]!
}

directive @presentation(list: [ProfileFieldPresentation!]!) on OBJECT | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

enum ProfileFieldPresentation {
    TEXT
    DATE
    SELECT
    SWITCH
    RANGE
}

enum StringFormat {
    EMAIL
    URL
}

type ProfileFieldTextConfigs @presentation(list: [TEXT]) {
    format: StringFormat
    multiline: Boolean
    secure: Boolean
    regexp: String
    minLength: Int
    maxLength: Int
}

type ProfileFieldSelectOption {
    label: String!
    value: String!
}

type ProfileFieldSelectConfigs @presentation(list: [SELECT]) {
    multiple: Boolean
    options: [ProfileFieldSelectOption!]!
}

type ProfileFieldDateConfigs @presentation(list: [DATE]) {
    minDate: Date!
    maxDate: Date!
}

type ProfileFieldDefaultConfigs @presentation(list: [SWITCH, RANGE]) {
    presentation: ProfileFieldPresentation!
}

union ProfileFieldConfigs = ProfileFieldTextConfigs | ProfileFieldSelectConfigs | ProfileFieldDateConfigs | ProfileFieldDefaultConfigs

type ProfileField implements Node {
    id: ID!
    name: String!
    label: String!
    presentation: ProfileFieldPresentation!
    isRequired: Boolean!
    section: ProfileFieldSection!
    configs: ProfileFieldConfigs
}

type ProfileFieldTextValue @presentation(list: [TEXT]) {
    value: String
}

type ProfileFieldSelectValue @presentation(list: [SELECT]) {
    value: [String!]
}

type ProfileFieldDateValue @presentation(list: [DATE]) {
    value: Date
}

type ProfileFieldSwitchValue @presentation(list: [SWITCH]) {
    value: Boolean
}

union ProfileFieldValueData = ProfileFieldTextValue | ProfileFieldSelectValue | ProfileFieldDateValue | ProfileFieldSwitchValue

type ProfileFieldValue implements Node {
    id: ID!
    field: ProfileField!
    data: ProfileFieldValueData
}

input ProfileFieldValueInput {
    fieldId: ID!

    booleanValue: Boolean @presentation(list: [SWITCH])
    stringValue: String @presentation(list: [TEXT])
    arrayValue: [String!] @presentation(list: [SELECT])
    dateValue: Date @presentation(list: [DATE])
}

input ProfileFieldSaveInput {
    userId: ID!
    values: [ProfileFieldValueInput!]!
}

type ProfileFieldSavePayload {
    user: User!
    nodes: [ProfileFieldValue!]!
}

type ProfileFieldSection implements Node {
    id: ID!
    label: String!
}


enum AvatarSize {
    SMALL
    MEDIUM
    BIG
}

type Avatar implements Node {
    id: ID!
    url(size: AvatarSize = SMALL): String!

    user: User!
}

type AvatarDeletePayload implements DeletePayload {
    deletedId: ID!
    user: User!
}

type AvatarCreatePayload implements CreatePayload {
    node: Avatar!
    user: User!
}



type Photo implements Node {
    id: ID!
    url: String!
    caption: String
    createdAt: Date!

    user: User!
    comments(offset: Int = 0, count: Int = 10): [Comment]
}

type PhotoEdge implements Edge {
    node: Photo!
    cursor: Cursor!
}



type Comment implements Node {
    id: ID!
    text: String!
}
