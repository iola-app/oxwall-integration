schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    signInUser(login: String!, password: String!): SingInPayload!
}

type Query {
    me: User
    users(offset: Int = 0, count: Int = 10): UserConnection!
    node(id: ID!): Node
}

scalar Date

interface Node {
    id: ID!
}

interface Edge {
    node: Node!
    cursor: String!
}

interface Connection {
    pageInfo: PageInfo!
    edges: [Edge]
    totalCount: Int
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type SingInPayload {
    accessToken: String
    user: User
}

type User implements Node {
    id: ID!
    name: String!
    email: String!
    activityTime: Date!

    avatar: Avatar
    friends(offset: Int = 0, count: Int = 10): [User]
    photos(offset: Int = 0, count: Int = 10): [Photo]
}

type UserEdge implements Edge {
    node: User!
    cursor: String!
}

type UserConnection implements Connection {
    pageInfo: PageInfo!
    edges: [UserEdge]
    totalCount: Int
}

enum AvatarSize {
    SMALL
    MEDIUM
    BIG
}

type Avatar implements Node {
    id: ID!
    url(size: AvatarSize = SMALL): String!
}

type Photo implements Node {
    id: ID!
    src: String!
    owner: User!

    comments(offset: Int = 0, count: Int = 10): [Comment]
}

type Comment implements Node {
    id: ID!
    text: String!
}
