schema {
    query: Query
    mutation: Mutation
}

scalar Date
scalar Cursor
scalar Upload

type Mutation {
    signInUser(login: String!, password: String!): SingInPayload!

    addUserAvatar(userId: ID!, file: Upload!): AvatarCreatePayload!
    deleteUserAvatar(id: ID!): AvatarDeletePayload!
}

type Query {
    me: User
    users(first: Int = 10, after: Cursor, search: String = ""): UserConnection!
    node(id: ID!): Node
}

interface Node {
    id: ID!
}

interface DeletePayload {
    deletedId: ID!
}

interface UpdatePayload {
    node: Node!
}

interface CreatePayload {
    node: Node!
}

interface Edge {
    node: Node!
    cursor: Cursor!
}

interface Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [Edge!]!
    totalCount: Int
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: Cursor
    endCursor: Cursor
}

type ConnectionMetaInfo {
    firstCursor: Cursor!
}

type SingInPayload {
    accessToken: String
    user: User
}



type User implements Node {
    id: ID!
    name: String!
    email: String!
    activityTime: Date!

    info: UserInfo!

    avatar: Avatar
    friends(first: Int = 10, after: Cursor): UserFriendsConnection!
    photos(first: Int = 10, after: Cursor): UserPhotoConnection!
}

type UserInfo {
    headline: String,
    location: String,
    about: String,
}

type UserEdge implements Edge {
    node: User!
    cursor: Cursor!
}

type UserConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [UserEdge!]!
    totalCount: Int
}

type UserFriendsConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [UserEdge!]!
    totalCount: Int
}

type UserPhotoConnection implements Connection {
    pageInfo: PageInfo!
    metaInfo: ConnectionMetaInfo!
    edges: [PhotoEdge!]!
    totalCount: Int
}



enum AvatarSize {
    SMALL
    MEDIUM
    BIG
}

type Avatar implements Node {
    id: ID!
    url(size: AvatarSize = SMALL): String!

    user: User!
}

type AvatarDeletePayload implements DeletePayload {
    deletedId: ID!
    user: User!
}

type AvatarCreatePayload implements CreatePayload {
    node: Avatar!
    user: User!
}



type Photo implements Node {
    id: ID!
    url: String!

    user: User!
    comments(offset: Int = 0, count: Int = 10): [Comment]
}

type PhotoEdge implements Edge {
    node: Photo!
    cursor: Cursor!
}



type Comment implements Node {
    id: ID!
    text: String!
}
